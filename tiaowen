import numpy as np
import cv2
import math
#计算圆的直径大小
def diameter(img):
    rows, cols=img.shape
    rows=int(rows)
    cols=int(cols)
    diameter=[0]
    diameter_max=[]
    for row in range(rows):
        for col in range(cols):
            if  img[row,col]>=30:
                diameter.append(col)
        diameter_max.append(max(diameter)-min(diameter)+1)
    diameter=max(diameter_max)
    return diameter
#单通道灰度化
def rgb2gray(img):
    h=img.shape[0]
    w=img.shape[1]
    img1=np.zeros((h,w),np.uint8)
    for i in range(h):
        for j in range(w):
            img1[i,j]=img[i,j,0]
    return img1
#截圆
def img_deal(input_img):
    rows, cols= input_img.shape
    rows=int(rows)
    cols=int(cols)
    img_new = np.zeros((rows,cols,4),np.uint8)
    img_new[:,:,0] = input_img[:,:]
    img_new[:,:,1] = input_img[:,:]
    img_new[:,:,2] = input_img[:,:]

    img_circle = np.zeros((rows,cols,1),np.uint8)
    img_circle[:,:,:] = 0 
    img_circle = cv2.circle(img_circle,(cols//2+4,rows//2-5),min(rows, cols)//2-6,(255),-1) 
    # 图片融合
    img_new[:,:,3] = img_circle[:,:,0]
    for row in range(rows):
        for col in range(cols):
            if img_new[row,col,3]==0:
                img_new[row,col]=[255,255,255,255]
    return img_new
def gausskernel(size):
    sigma=1.0
    gausskernel=np.zeros((size,size),np.float32)
    for i in range (size):
        for j in range (size):
            norm=math.pow(i-1,2)+pow(j-1,2)
            gausskernel[i,j]=math.exp(-norm/(2*math.pow(sigma,2)))   
    sum=np.sum(gausskernel)   
    kernel=gausskernel/sum   
    return kernel
def gauss(img,number):#高斯滤波
    h=img.shape[0]
    w=img.shape[1]
    img1=np.zeros((h,w),np.uint8)
    kernel=gausskernel(number)   
    for i in range ((number-1)//2,h-(number+1)//2):#舍弃边界
        for j in range ((number-1)//2,w-(number+1)//2):
            sum=0
            for k in range(-(number-1)//2,(number+1)//2):
                for l in range(-(number-1)//2,(number+1)//2):
                    sum+=img[i+k,j+l]*kernel[(number-1)//2+k,l+(number-1)//2]   
            img1[i,j]=sum
    return img1
def threshold(img):#二值化
    rows,cols,channel=img.shape
    rows=int(rows)
    cols=int(cols)
    img_new = np.zeros((rows,cols,3),np.uint8)
    img_new[:,:,0:2] = img[:,:,0:2]
    for row in range(rows):
        for col in range(cols):
            if img_new[row,col,0]>=20:
                img_new[row,col,:]=[255,255,255]
            else:
                img_new[row,col,:]=[0,0,0]
    return img_new
#初始化图像为白色
def initialization(img):
    rows,cols,channels=img.shape
    rows=int(rows)
    cols=int(cols)
    img1= np.zeros((rows,cols,3),np.uint8)
    for i in range(rows):
        for j in range(cols):
            img1[i,j,:]=[255,255,255]
    return img1
#膨胀算法
def Dilate(img):
    rows,cols,channels=img.shape
    rows=int(rows)
    cols=int(cols)
#初始化一张白色背景图
    img1=initialization(img)
#创建膨胀数组
#   se=np.zeros((3,3),dtype = int)
#   for x in range(3):
#       for y in range(3):
#           se[x,y]=1
    for i in range(1,rows-1):
        for j in range(1, cols-1):
            for k in range(3):
                for l in range(3):
                    if img[i-1+k,j-1+l,0]==0:
                        img1[i,j,:]=[0,0,0]
                        break
    return img1
#边界置为255
def bianjie(img):
    rows,cols=img.shape
    rows=int(rows)
    cols=int(cols)
    for i in range(rows):
        img[i,0]=255
        img[i,cols-1]=255
    for j in range(cols):
        img[0,j]=255
        img[rows-1,j]=255
    return img
#种子填充法
def scan_line_seed(i,j,contour_index,frame):
    size=0#
    stack = []
    return_value = 0
    if frame[i, j] ==0:
        stack.append((i,j));
        while len(stack) != 0:
            seed = stack.pop()
            x,y=seed
            #寻找上界
            while frame[x, y] ==0:
                frame[x, y] =(contour_index+1)*5;
                x += 1
                size+=1#
            x_right = x-1
            x, y = seed
            x -= 1
            #寻找下界
            while frame[x, y] ==0:
                frame[x, y] =(contour_index+1)*5;
                x -= 1
                size+=1#
            x_left = x + 1
            #如果左右端点为空则加入种子点
            if frame[x_left, y - 1] ==0:
                stack.append((x_left, y-1))
            if frame[x_left, y + 1] ==0:
                stack.append((x_left, y+1))
            if frame[x_right, y - 1] ==0:
                stack.append((x_right, y-1))
            if frame[x_right, y + 1] ==0:
                stack.append((x_right, y+1))
            for x in range(x_left,x_right+1):
                #上左
                if frame[x,y-1] == 0 and frame[x-1, y-1] != 0:
                    stack.append((x,y-1))
                #下左
                if frame[x,y+1] == 0 and frame[x-1, y+1] != 0:
                    stack.append((x,y+1))
                #上右
                if frame[x,y-1] != 0 and frame[x-1, y-1] == 0:
                    stack.append((x-1,y-1))
                #下右
                if frame[x,y+1] != 0 and frame[x-1, y+1] == 0:
                    stack.append((x-1,y+1))
        return_value = 1
    return return_value,size
def tiaowenjishu(img):
    contour_index = 0
    n=0
    for x in range(img.shape[0]):
        for y in range(img.shape[1]):
            value,size=scan_line_seed(x, y,contour_index,img)
            if value==1:
                contour_index = contour_index + 1
                print(size)
                if size<500:
                    n+=1
    contour_index=contour_index-n
    cv2.imwrite("F:\\gansheyitiaowen\\tiaowenshu\\tupian\\004.bmp",img)
    return contour_index
if __name__ == "__main__":
    image= cv2.cvtColor(cv2.imread("F:\\gansheyitiaowen\\tiaowenshu\\tupian\\04.bmp"),cv2.COLOR_BGR2GRAY)
    n=diameter(image)#计算直径
    gaussimage = gauss(image,5)#高斯滤波（5*5）
    jiequan=img_deal(gaussimage)#截圆(四通道）
    erzhihua=threshold(jiequan)#二值化（三通道）
    pengzhang=Dilate(erzhihua)#图像膨胀处理
    dantongdao=rgb2gray(pengzhang)#图像单通道化
    bianjie=bianjie(dantongdao)#边界元素置为255
    m=tiaowenjishu(bianjie)#计算条纹数
    print("diameter=",n)
    print("tiaowenshu=",m)
